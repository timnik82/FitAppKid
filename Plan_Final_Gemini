# **Комплексный план фитнес-приложения (Финальная версия)**

### **Часть I: Философия и ключевые принципы**

* **Главная цель:** Превратить физическую активность из рутины в увлекательную игру или приключение. Ребенок должен хотеть вернуться в приложение не за очками, а потому что ему весело.  
* **Дизайн для планшетов (10 дюймов):** Интерфейс должен быть оптимизирован под планшет, с крупными элементами, яркими цветами и минимумом текста.  
* **Безопасность как фундамент:** Весь дизайн и архитектура строятся на принципах безопасности, конфиденциальности и соответствия международным стандартам (COPPA, GDPR).

### **Часть II: Пользовательский опыт (UX/UI)**

#### **1\. Визуальный дизайн и интерфейс**

* **Крупные интерактивные элементы:** Кнопки и кликабельные элементы должны быть не менее **44x44 пикселей**.  
* **Читабельный текст:** Шрифт **sans-serif**, размер не менее **16-18px** с межстрочным интервалом 1.4-1.6.  
* **Доступность (Accessibility):** Цветовая палитра соответствует стандарту **WCAG 2.1 AA** (контрастность не ниже 4.5:1). Предусмотреть режим высокой контрастности.  
* **Понятная навигация:** Узнаваемые иконки с текстовыми подписями. Навигация постоянная и не глубже 2-3 кликов.  
* **Мгновенная обратная связь:** Каждое нажатие сопровождается визуальным/звуковым эффектом.

#### **2\. Игровой процесс и мотивация**

* **Режим "Приключений":** "Карта приключений" вместо плана тренировок.  
* **Система "маленьких побед":** Короткие блоки (2-5 минут) с похвалой после каждого.  
* **Награды, ориентированные на старание:** Визуальные достижения (стикеры, значки) и анимации Lottie (салют, танец персонажа).  
* **Прогресс без сравнения:** Ребёнок соревнуется только с самим собой.  
* **Персонаж-маскот:** Анимированный персонаж-помощник.

### **Часть III: Функциональная и техническая архитектура**

#### **3\. Безопасность и соответствие нормативам (COPPA/GDPR)**

* **Верифицируемое согласие родителей (Verifiable Parental Consent).**  
* **Минимизация и изоляция данных:** Использование **Row Level Security (RLS)** в Supabase.  
* **Полный контроль для родителей:** Доступ, редактирование и удаление данных ребенка.  
* **Родительский замок** для доступа к настройкам и внешним ссылкам.

#### **4\. Управление пользователями и профили**

* **Иерархия аккаунтов:** "Родитель" \-\> "Ребёнок".  
* **Создание профиля ребёнка** только родителем.

#### **5\. Упражнения и тренировки**

* **Библиотека упражнений:** Фильтрация по типу, сложности, инвентарю и длительности (5-15 минут).  
* **Интерактивные инструкции:** Зацикленные видео/анимации, голосовые подсказки (**ElevenLabs**), интерактивный счётчик.  
* **Офлайн-доступ:** Текстовые инструкции и изображения доступны без интернета.  
* **Оптимизация производительности:** "Lazy loading" для видео, плавные анимации (60fps).

#### **6\. Родительский кабинет**

* **Аналитика для родителей:** Просмотр статистики по времени активности, типам выполненных упражнений.  
* **Управление профилем** и совместные заметки о самочувствии.

#### **7\. Техническая стратегия**

* **Основа:** **Bolt.new** для прототипирования на **Next.js 14, Supabase, Tailwind CSS**.  
* **Офлайн-режим:** Реализация как **Progressive Web App (PWA)**.  
* **Инструменты хакатона:** **ElevenLabs, Tavus, Sentry, Entri**.  
* **Оптимизация под мобильные устройства:** Дизайн "thumb-friendly", поддержка разных ориентаций, оптимизация батареи.

### **Часть IV: Стратегия работы с AI-инструментом (Bolt.new)**

Вместо серии коротких запросов используется единый, комплексный **мастер-промпт** для постановки основной задачи, который затем дополняется более сфокусированными запросами на отдельные модули.

#### **Мастер-промпт: Архитектура всего приложения**

Ты — ведущий full-stack разработчик, специализирующийся на создании детских приложений, соответствующих требованиям COPPA, и эксперт в области геймификации и UX-дизайна для детей.

Твоя задача — спроектировать и создать архитектуру для детского фитнес-приложения, используя мой готовый JSON-файл с упражнениями, который я прикреплю.

\*\*Технический стек:\*\*  
\- Frontend: Next.js 14 с TypeScript.  
\- Backend и база данных: Supabase (для аутентификации и хранения данных).  
\- Стилизация: Tailwind CSS с яркой, детской дизайн-системой.  
\- Платформа: Progressive Web App (PWA) для обеспечения офлайн-функциональности.

\*\*Ключевые функции для реализации:\*\*  
1\.  \*\*Двойная система аккаунтов:\*\* Родитель регистрируется и создает/управляет аккаунтом ребенка.  
2\.  \*\*Каталог упражнений:\*\* Использует данные из моего JSON-файла.  
3\.  \*\*Генератор игровых квестов:\*\* Создает персонализированные "приключения" из доступных упражнений.  
4\.  \*\*Система отслеживания прогресса\*\* с родительским контролем.  
5\.  \*\*Безопасная демонстрация видео:\*\* Использует видео (если URL есть в данных) через встроенные плееры с отключенными рекомендациями.

\*\*Задачи по интеграции данных (с моим JSON-файлом):\*\*  
\- Проанализируй структуру моего файла и предложи оптимальную схему для базы данных Supabase.  
\- Создай скрипт для миграции данных из JSON в Supabase.  
\- Реализуй фильтрацию и поиск по свойствам упражнений из моего файла.  
\- Разработай алгоритм генерации квестов, используя категории и метаданные упражнений.

\*\*Требования по безопасности и соответствию (COPPA):\*\*  
\- \*\*Приоритет №1:\*\* Вся архитектура должна строиться вокруг требований COPPA.  
\- \*\*Минимальный сбор данных:\*\* Никаких метрик здоровья.  
\- \*\*Верифицируемое согласие родителей\*\* перед созданием аккаунта ребенка.  
\- \*\*Изоляция данных семьи\*\* с помощью RLS-политик в Supabase.  
\- Никаких социальных функций, чатов, таблиц лидеров.  
\- \*\*Родительский замок\*\* на все внешние ссылки.  
\- Автоматический выход из сессии через 30 минут бездействия.

\*\*Пошаговый план реализации:\*\*  
1\.  \*\*Шаг 1 (Анализ):\*\* Начни с анализа моего JSON-файла. Предложи схему базы данных и укажи, какие дополнительные поля могут понадобиться.  
2\.  \*\*Шаг 2 (Аутентификация):\*\* Спроектируй систему аутентификации и управления аккаунтами (Родитель \-\> Ребенок).  
3\.  \*\*Шаг 3 (База упражнений):\*\* Реализуй импорт данных и создай API для работы с ними.  
4\.  \*\*Шаг 4 (Интерфейс ребенка):\*\* Создай компоненты для каталога упражнений и главного экрана с "Картой приключений".  
5\.  \*\*Шаг 5 (Родительский кабинет):\*\* Спроектируй интерфейс и логику для родительского дашборда.

\*\*Формат ответа:\*\*  
Начни с анализа файла. После этого предоставь полную архитектуру приложения, включая схему БД, описание API-эндпоинтов, иерархию React-компонентов, потоки аутентификации и конфигурацию для развертывания.

Этот мастер-промпт задает четкие рамки и ожидания, что позволит bolt.new сгенерировать гораздо более качественную и релевантную основу для вашего приложения.
